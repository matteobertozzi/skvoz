#!/usr/bin/env python
# Copyright (c) 2012, Matteo Bertozzi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the <organization> nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from skvoz.collection.server.service import CollectorService
from skvoz import DEFAULT_COLLECTOR_PORT
from skvoz.util import cmdline

import logging
import sys
import os

def _arg_parser():
    parser = cmdline.ArgumentParser()

    group = parser.add_argument_group('Data related')
    group.add_argument('-d', '--data', dest='data_dir', action='store',
                        required=True,
                        help='Default data collection directory.')

    group = parser.add_argument_group('Sink related')
    group.add_argument('-s', '--sink', dest='sink_conf', action='store',
                        help='Sink configuration file.')

    group = parser.add_argument_group('Process related')
    group.add_argument('-b', '--bind', dest='bind', action='store',
                       default=':%d' % DEFAULT_COLLECTOR_PORT,
                       help='Bind address (unix socket path or localhost:%d)' % DEFAULT_COLLECTOR_PORT)
    group.add_argument('-U', '--user', dest='user', action='store',
                       help='User that runs the service')
    group.add_argument('-G', '--group', dest='group', action='store',
                       help='Group for the service')
    group.add_argument('-M', '--umask', dest='umask', action='store', type=int,
                       help='umask for the service')

    options = parser.parse_args()
    options.bind = cmdline.to_address(options.bind)
    return options

if __name__ == '__main__':
    options = _arg_parser()

    if not os.path.exists(options.data_dir):
        os.makedirs(options.data_dir)
    elif not os.path.isdir(options.data_dir):
        print >> sys.stderr, "'%s' is not a directory..." % options.data_dir
        sys.exit(1)

    logging.basicConfig()
    service = CollectorService()
    if options.user: service.set_user(options.user)
    if options.group: service.set_group(options.group)
    if options.umask: service.set_umask(options.umask)
    service.run(options.bind, options.data_dir, options.sink_conf)
